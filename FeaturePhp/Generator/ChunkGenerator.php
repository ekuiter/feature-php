<?

/**
 * The FeaturePhp\Generator\ChunkGenerator class.
 */

namespace FeaturePhp\Generator;
use \FeaturePhp as fphp;

/**
 * Generates text files from multiple chunks.
 * A selected artifact can specify chunks of text to include in a
 * {@see \FeaturePhp\File\ChunkFile} (see {@see \FeaturePhp\Specification\ChunkSpecification}).
 * In the product line's generator settings, more details about chunked files
 * (such as header and footer) can be specified (see {@see Settings}).
 */
class ChunkGenerator extends Generator {
    /**
     * @var \FeaturePhp\File\ChunkFile[] $chunkFiles cached chunk files generated by this generator
     */
    private $chunkFiles;

    /**
     * Creates a chunk generator.
     * @param Settings $settings
     */
    public function __construct($settings) {
        parent::__construct($settings);
        $this->chunkFiles = array();

        foreach ($settings->getOptional("files", array()) as $file)
            $this->getChunkFile(fphp\Specification\ChunkSpecification::fromArray($file, $settings));
    }

    /**
     * Returns the chunk generator's key.
     * @return string
     */
    public static function getKey() {
        return "chunk";
    }

    /**
     * Creates a chunked file from a chunk specification.
     * If the chunked file was already created, returns the cached chunked file.
     * @param \FeaturePhp\Specification\ChunkSpecification $chunkSpecification
     * @return ChunkFile
     */
    private function getChunkFile($chunkSpecification) {
        $target = $chunkSpecification->getTarget();
        if (!array_key_exists($target, $this->chunkFiles)) {
            $this->chunkFiles[$target] = fphp\File\ChunkFile::fromSpecification($chunkSpecification);
            $this->logFile->log(null, "added file \"{$chunkSpecification->getTarget()}\"");
        }
        return $this->chunkFiles[$target];
    }

    /**
     * Generates the chunked files.
     * Only chunk specifications from selected artifacts are considered.
     */
    public function _generateFiles() {
        foreach ($this->selectedArtifacts as $artifact) {
            $settings = $artifact->getGeneratorSettings(self::getKey());

            foreach ($settings->getOptional("files", array()) as $file) {
                $chunkSpecification = fphp\Specification\ChunkSpecification::fromArray($file, $settings);
                $this->getChunkFile($chunkSpecification)->addChunk($chunkSpecification);
                $this->logFile->log($artifact, "added chunk in file \"{$chunkSpecification->getTarget()}\"");
            }
        }

        foreach ($this->chunkFiles as $chunkFile)
            $this->files[] = $chunkFile;
    }
}

?>