<?php

/**
 * The FeaturePhp\Generator\Generator class.
 */

namespace FeaturePhp\Generator;
use \FeaturePhp as fphp;

/**
 * Generates a product's files.
 * A generator is used to automatically generate files for every registered
 * {@see \FeaturePhp\Artifact\Artifact} of a {@see \FeaturePhp\ProductLine\Product}.
 */
abstract class Generator {
    /**
     * @var Settings $settings the settings object with generator settings
     */
    protected $settings;

    /**
     * @var \FeaturePhp\Artifact\Artifact[] $selectedArtifacts
     * artifacts with a corresponding selected feature that specify this generator
     */
    protected $selectedArtifacts;
    
    /**
     * @var \FeaturePhp\Artifact\Artifact[] $deselectedArtifacts
     * artifacts with a corresponding deselected feature that specify this generator
     */
    protected $deselectedArtifacts;

    /**
     * @var \FeaturePhp\File\LogFile $logFile the log file for this generator
     */
    protected $logFile;

    /**
     * @var \FeaturePhp\File\File[] $files cached files generated by this generator
     */
    protected $files;

    /**
     * @var \FeaturePhp\Artifact\TracingLink[] $tracingLinks cached tracing links generated by this generator
     */
    protected $tracingLinks;

    /**
     * Returns the class names of all generators.
     * @return string[]
     */
    private static function getGenerators() {
        return array(
            "\FeaturePhp\Generator\EmptyGenerator",
            "\FeaturePhp\Generator\CopyGenerator",
            "\FeaturePhp\Generator\RuntimeGenerator",
            "\FeaturePhp\Generator\TemplateGenerator",
            "\FeaturePhp\Generator\ChunkGenerator",
            "\FeaturePhp\Generator\CollaborationGenerator",
            "\FeaturePhp\Generator\AspectGenerator"
        );
    }

    /**
     * Returns a map from all generator keys to class names.
     * @return string[]
     */
    public static function getGeneratorMap() {
        $generatorMap = array();
        foreach (self::getGenerators() as $generator)
            $generatorMap[call_user_func(array($generator, "getKey"))] = $generator;
        return $generatorMap;
    }

    /**
     * Creates a generator.
     * @param Settings $settings
     */
    public function __construct($settings) {
        $this->settings = $settings;
        $this->selectedArtifacts = array();
        $this->deselectedArtifacts = array();
        $this->files = null;
        $this->tracingLinks = null;
        $this->logFile = new fphp\File\LogFile(static::getKey());
    }

    /**
     * Returns the generator's settings.
     * @return Settings
     */
    public function getSettings() {
        return $this->settings;
    }

    /**
     * Registers an artifact whose corresponding feature is selected.
     * @param \FeaturePhp\Artifact\Artifact $artifact
     */
    public function addSelectedArtifact($artifact) {
        $this->selectedArtifacts[] = $artifact;
    }

    /**
     * Registers an artifact whose corresponding feature is deselected.
     * @param \FeaturePhp\Artifact\Artifact $artifact
     */
    public function addDeselectedArtifact($artifact) {
        $this->deselectedArtifacts[] = $artifact;
    }

    /**
     * Returns all registered artifacts (selected and deselected).
     * @return \FeaturePhp\Artifact\Artifact[]
     */
    public function getRegisteredArtifacts() {
        return array_merge($this->selectedArtifacts, $this->deselectedArtifacts);
    }

    /**
     * Returns whether any artifacts are registered with the generator.
     * @return bool
     */
    public function hasArtifacts() {
        return count($this->getRegisteredArtifacts()) > 0;
    }

    /**
     * Generates the files for all registered artifacts.
     * If the files have already been generated, returns the cached files.
     * The generator's log file is included.
     * @return \FeaturePhp\File\File[]
     */
    public function generateFiles() {
        if ($this->files === null) {
            $this->files = array();
            $this->tracingLinks = array();
            $this->_generateFiles();
        }
        if ($this->settings->getOptional("logFile", false))
            return array_merge(array($this->logFile), $this->files);
        else
            return $this->files;
    }

    /**
     * Returns tracing links for all registered artifacts.
     * @return \FeaturePhp\Artifact\TracingLink[]
     */
    public function trace() {
        $this->generateFiles();
        return $this->tracingLinks;
    }

    /**
     * Returns whether a feature's artifact is selected.
     * @param string $featureName
     * @return bool
     */
    protected function isSelectedFeature($featureName) {        
        $isSelected = false;
        foreach ($this->selectedArtifacts as $selectedArtifact)
            if ($featureName === $selectedArtifact->getFeature()->getName())
                $isSelected = true;
        return $isSelected;
    }

    /**
     * Returns the generator's key.
     * The key is the name used to identify the {@see \FeaturePhp\Generator\Settings}
     * for a generator.
     * @return string
     */
    abstract public static function getKey();

    /**
     * Internal function for generating the files for all registered artifacts.
     */
    abstract protected function _generateFiles();
}

?>